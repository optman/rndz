// This file is generated by rust-protobuf 2.28.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `rndz.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_28_0;

#[derive(PartialEq,Clone,Default)]
pub struct Request {
    // message fields
    pub id: ::std::string::String,
    // message oneof groups
    pub cmd: ::std::option::Option<Request_oneof_cmd>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Request_oneof_cmd {
    Ping(Ping),
    Isync(Isync),
    Fsync(Fsync),
    Rsync(Rsync),
    Bye(Bye),
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // .Ping Ping = 2;


    pub fn get_Ping(&self) -> &Ping {
        match self.cmd {
            ::std::option::Option::Some(Request_oneof_cmd::Ping(ref v)) => v,
            _ => <Ping as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_Ping(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Ping(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(Request_oneof_cmd::Ping(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Ping(&mut self, v: Ping) {
        self.cmd = ::std::option::Option::Some(Request_oneof_cmd::Ping(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Ping(&mut self) -> &mut Ping {
        if let ::std::option::Option::Some(Request_oneof_cmd::Ping(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(Request_oneof_cmd::Ping(Ping::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(Request_oneof_cmd::Ping(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Ping(&mut self) -> Ping {
        if self.has_Ping() {
            match self.cmd.take() {
                ::std::option::Option::Some(Request_oneof_cmd::Ping(v)) => v,
                _ => panic!(),
            }
        } else {
            Ping::new()
        }
    }

    // .Isync Isync = 3;


    pub fn get_Isync(&self) -> &Isync {
        match self.cmd {
            ::std::option::Option::Some(Request_oneof_cmd::Isync(ref v)) => v,
            _ => <Isync as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_Isync(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Isync(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(Request_oneof_cmd::Isync(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Isync(&mut self, v: Isync) {
        self.cmd = ::std::option::Option::Some(Request_oneof_cmd::Isync(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Isync(&mut self) -> &mut Isync {
        if let ::std::option::Option::Some(Request_oneof_cmd::Isync(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(Request_oneof_cmd::Isync(Isync::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(Request_oneof_cmd::Isync(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Isync(&mut self) -> Isync {
        if self.has_Isync() {
            match self.cmd.take() {
                ::std::option::Option::Some(Request_oneof_cmd::Isync(v)) => v,
                _ => panic!(),
            }
        } else {
            Isync::new()
        }
    }

    // .Fsync Fsync = 4;


    pub fn get_Fsync(&self) -> &Fsync {
        match self.cmd {
            ::std::option::Option::Some(Request_oneof_cmd::Fsync(ref v)) => v,
            _ => <Fsync as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_Fsync(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Fsync(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(Request_oneof_cmd::Fsync(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Fsync(&mut self, v: Fsync) {
        self.cmd = ::std::option::Option::Some(Request_oneof_cmd::Fsync(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Fsync(&mut self) -> &mut Fsync {
        if let ::std::option::Option::Some(Request_oneof_cmd::Fsync(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(Request_oneof_cmd::Fsync(Fsync::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(Request_oneof_cmd::Fsync(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Fsync(&mut self) -> Fsync {
        if self.has_Fsync() {
            match self.cmd.take() {
                ::std::option::Option::Some(Request_oneof_cmd::Fsync(v)) => v,
                _ => panic!(),
            }
        } else {
            Fsync::new()
        }
    }

    // .Rsync Rsync = 5;


    pub fn get_Rsync(&self) -> &Rsync {
        match self.cmd {
            ::std::option::Option::Some(Request_oneof_cmd::Rsync(ref v)) => v,
            _ => <Rsync as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_Rsync(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Rsync(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(Request_oneof_cmd::Rsync(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Rsync(&mut self, v: Rsync) {
        self.cmd = ::std::option::Option::Some(Request_oneof_cmd::Rsync(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Rsync(&mut self) -> &mut Rsync {
        if let ::std::option::Option::Some(Request_oneof_cmd::Rsync(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(Request_oneof_cmd::Rsync(Rsync::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(Request_oneof_cmd::Rsync(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Rsync(&mut self) -> Rsync {
        if self.has_Rsync() {
            match self.cmd.take() {
                ::std::option::Option::Some(Request_oneof_cmd::Rsync(v)) => v,
                _ => panic!(),
            }
        } else {
            Rsync::new()
        }
    }

    // .Bye Bye = 6;


    pub fn get_Bye(&self) -> &Bye {
        match self.cmd {
            ::std::option::Option::Some(Request_oneof_cmd::Bye(ref v)) => v,
            _ => <Bye as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_Bye(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Bye(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(Request_oneof_cmd::Bye(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Bye(&mut self, v: Bye) {
        self.cmd = ::std::option::Option::Some(Request_oneof_cmd::Bye(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Bye(&mut self) -> &mut Bye {
        if let ::std::option::Option::Some(Request_oneof_cmd::Bye(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(Request_oneof_cmd::Bye(Bye::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(Request_oneof_cmd::Bye(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Bye(&mut self) -> Bye {
        if self.has_Bye() {
            match self.cmd.take() {
                ::std::option::Option::Some(Request_oneof_cmd::Bye(v)) => v,
                _ => panic!(),
            }
        } else {
            Bye::new()
        }
    }
}

impl ::protobuf::Message for Request {
    fn is_initialized(&self) -> bool {
        if let Some(Request_oneof_cmd::Ping(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Request_oneof_cmd::Isync(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Request_oneof_cmd::Fsync(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Request_oneof_cmd::Rsync(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Request_oneof_cmd::Bye(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(Request_oneof_cmd::Ping(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(Request_oneof_cmd::Isync(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(Request_oneof_cmd::Fsync(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(Request_oneof_cmd::Rsync(is.read_message()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(Request_oneof_cmd::Bye(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if let ::std::option::Option::Some(ref v) = self.cmd {
            match v {
                &Request_oneof_cmd::Ping(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Request_oneof_cmd::Isync(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Request_oneof_cmd::Fsync(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Request_oneof_cmd::Rsync(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Request_oneof_cmd::Bye(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.cmd {
            match v {
                &Request_oneof_cmd::Ping(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Request_oneof_cmd::Isync(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Request_oneof_cmd::Fsync(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Request_oneof_cmd::Rsync(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Request_oneof_cmd::Bye(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Request {
        Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Request| { &m.id },
                |m: &mut Request| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Ping>(
                "Ping",
                Request::has_Ping,
                Request::get_Ping,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Isync>(
                "Isync",
                Request::has_Isync,
                Request::get_Isync,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Fsync>(
                "Fsync",
                Request::has_Fsync,
                Request::get_Fsync,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Rsync>(
                "Rsync",
                Request::has_Rsync,
                Request::get_Rsync,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Bye>(
                "Bye",
                Request::has_Bye,
                Request::get_Bye,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Request>(
                "Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Request {
        static instance: ::protobuf::rt::LazyV2<Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Request::new)
    }
}

impl ::protobuf::Clear for Request {
    fn clear(&mut self) {
        self.id.clear();
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Ping {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Ping {
    fn default() -> &'a Ping {
        <Ping as ::protobuf::Message>::default_instance()
    }
}

impl Ping {
    pub fn new() -> Ping {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Ping {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Ping {
        Ping::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Ping>(
                "Ping",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Ping {
        static instance: ::protobuf::rt::LazyV2<Ping> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Ping::new)
    }
}

impl ::protobuf::Clear for Ping {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Ping {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ping {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Isync {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Isync {
    fn default() -> &'a Isync {
        <Isync as ::protobuf::Message>::default_instance()
    }
}

impl Isync {
    pub fn new() -> Isync {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Isync {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Isync {
        Isync::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Isync| { &m.id },
                |m: &mut Isync| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Isync>(
                "Isync",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Isync {
        static instance: ::protobuf::rt::LazyV2<Isync> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Isync::new)
    }
}

impl ::protobuf::Clear for Isync {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Isync {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Isync {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Response {
    // message fields
    pub id: ::std::string::String,
    // message oneof groups
    pub cmd: ::std::option::Option<Response_oneof_cmd>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Response_oneof_cmd {
    Pong(Pong),
    Redirect(Redirect),
    Fsync(Fsync),
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // .Pong Pong = 2;


    pub fn get_Pong(&self) -> &Pong {
        match self.cmd {
            ::std::option::Option::Some(Response_oneof_cmd::Pong(ref v)) => v,
            _ => <Pong as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_Pong(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Pong(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(Response_oneof_cmd::Pong(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Pong(&mut self, v: Pong) {
        self.cmd = ::std::option::Option::Some(Response_oneof_cmd::Pong(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Pong(&mut self) -> &mut Pong {
        if let ::std::option::Option::Some(Response_oneof_cmd::Pong(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(Response_oneof_cmd::Pong(Pong::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(Response_oneof_cmd::Pong(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Pong(&mut self) -> Pong {
        if self.has_Pong() {
            match self.cmd.take() {
                ::std::option::Option::Some(Response_oneof_cmd::Pong(v)) => v,
                _ => panic!(),
            }
        } else {
            Pong::new()
        }
    }

    // .Redirect Redirect = 3;


    pub fn get_Redirect(&self) -> &Redirect {
        match self.cmd {
            ::std::option::Option::Some(Response_oneof_cmd::Redirect(ref v)) => v,
            _ => <Redirect as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_Redirect(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Redirect(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(Response_oneof_cmd::Redirect(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Redirect(&mut self, v: Redirect) {
        self.cmd = ::std::option::Option::Some(Response_oneof_cmd::Redirect(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Redirect(&mut self) -> &mut Redirect {
        if let ::std::option::Option::Some(Response_oneof_cmd::Redirect(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(Response_oneof_cmd::Redirect(Redirect::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(Response_oneof_cmd::Redirect(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Redirect(&mut self) -> Redirect {
        if self.has_Redirect() {
            match self.cmd.take() {
                ::std::option::Option::Some(Response_oneof_cmd::Redirect(v)) => v,
                _ => panic!(),
            }
        } else {
            Redirect::new()
        }
    }

    // .Fsync Fsync = 4;


    pub fn get_Fsync(&self) -> &Fsync {
        match self.cmd {
            ::std::option::Option::Some(Response_oneof_cmd::Fsync(ref v)) => v,
            _ => <Fsync as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_Fsync(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Fsync(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(Response_oneof_cmd::Fsync(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Fsync(&mut self, v: Fsync) {
        self.cmd = ::std::option::Option::Some(Response_oneof_cmd::Fsync(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Fsync(&mut self) -> &mut Fsync {
        if let ::std::option::Option::Some(Response_oneof_cmd::Fsync(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(Response_oneof_cmd::Fsync(Fsync::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(Response_oneof_cmd::Fsync(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Fsync(&mut self) -> Fsync {
        if self.has_Fsync() {
            match self.cmd.take() {
                ::std::option::Option::Some(Response_oneof_cmd::Fsync(v)) => v,
                _ => panic!(),
            }
        } else {
            Fsync::new()
        }
    }
}

impl ::protobuf::Message for Response {
    fn is_initialized(&self) -> bool {
        if let Some(Response_oneof_cmd::Pong(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Response_oneof_cmd::Redirect(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Response_oneof_cmd::Fsync(ref v)) = self.cmd {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(Response_oneof_cmd::Pong(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(Response_oneof_cmd::Redirect(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.cmd = ::std::option::Option::Some(Response_oneof_cmd::Fsync(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if let ::std::option::Option::Some(ref v) = self.cmd {
            match v {
                &Response_oneof_cmd::Pong(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Response_oneof_cmd::Redirect(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Response_oneof_cmd::Fsync(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.cmd {
            match v {
                &Response_oneof_cmd::Pong(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Response_oneof_cmd::Redirect(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Response_oneof_cmd::Fsync(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Response {
        Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Response| { &m.id },
                |m: &mut Response| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Pong>(
                "Pong",
                Response::has_Pong,
                Response::get_Pong,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Redirect>(
                "Redirect",
                Response::has_Redirect,
                Response::get_Redirect,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Fsync>(
                "Fsync",
                Response::has_Fsync,
                Response::get_Fsync,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Response>(
                "Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Response {
        static instance: ::protobuf::rt::LazyV2<Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Response::new)
    }
}

impl ::protobuf::Clear for Response {
    fn clear(&mut self) {
        self.id.clear();
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Pong {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Pong {
    fn default() -> &'a Pong {
        <Pong as ::protobuf::Message>::default_instance()
    }
}

impl Pong {
    pub fn new() -> Pong {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Pong {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Pong {
        Pong::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Pong>(
                "Pong",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Pong {
        static instance: ::protobuf::rt::LazyV2<Pong> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Pong::new)
    }
}

impl ::protobuf::Clear for Pong {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Pong {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Pong {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Redirect {
    // message fields
    pub id: ::std::string::String,
    pub addr: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Redirect {
    fn default() -> &'a Redirect {
        <Redirect as ::protobuf::Message>::default_instance()
    }
}

impl Redirect {
    pub fn new() -> Redirect {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string addr = 2;


    pub fn get_addr(&self) -> &str {
        &self.addr
    }
    pub fn clear_addr(&mut self) {
        self.addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_addr(&mut self, v: ::std::string::String) {
        self.addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addr(&mut self) -> &mut ::std::string::String {
        &mut self.addr
    }

    // Take field
    pub fn take_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.addr, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Redirect {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.addr)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.addr.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.addr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.addr.is_empty() {
            os.write_string(2, &self.addr)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Redirect {
        Redirect::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Redirect| { &m.id },
                |m: &mut Redirect| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "addr",
                |m: &Redirect| { &m.addr },
                |m: &mut Redirect| { &mut m.addr },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Redirect>(
                "Redirect",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Redirect {
        static instance: ::protobuf::rt::LazyV2<Redirect> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Redirect::new)
    }
}

impl ::protobuf::Clear for Redirect {
    fn clear(&mut self) {
        self.id.clear();
        self.addr.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Redirect {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Redirect {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Fsync {
    // message fields
    pub id: ::std::string::String,
    pub addr: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Fsync {
    fn default() -> &'a Fsync {
        <Fsync as ::protobuf::Message>::default_instance()
    }
}

impl Fsync {
    pub fn new() -> Fsync {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string addr = 2;


    pub fn get_addr(&self) -> &str {
        &self.addr
    }
    pub fn clear_addr(&mut self) {
        self.addr.clear();
    }

    // Param is passed by value, moved
    pub fn set_addr(&mut self, v: ::std::string::String) {
        self.addr = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_addr(&mut self) -> &mut ::std::string::String {
        &mut self.addr
    }

    // Take field
    pub fn take_addr(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.addr, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Fsync {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.addr)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.addr.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.addr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.addr.is_empty() {
            os.write_string(2, &self.addr)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Fsync {
        Fsync::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Fsync| { &m.id },
                |m: &mut Fsync| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "addr",
                |m: &Fsync| { &m.addr },
                |m: &mut Fsync| { &mut m.addr },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Fsync>(
                "Fsync",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Fsync {
        static instance: ::protobuf::rt::LazyV2<Fsync> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Fsync::new)
    }
}

impl ::protobuf::Clear for Fsync {
    fn clear(&mut self) {
        self.id.clear();
        self.addr.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Fsync {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Fsync {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Rsync {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Rsync {
    fn default() -> &'a Rsync {
        <Rsync as ::protobuf::Message>::default_instance()
    }
}

impl Rsync {
    pub fn new() -> Rsync {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Rsync {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Rsync {
        Rsync::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Rsync| { &m.id },
                |m: &mut Rsync| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Rsync>(
                "Rsync",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Rsync {
        static instance: ::protobuf::rt::LazyV2<Rsync> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Rsync::new)
    }
}

impl ::protobuf::Clear for Rsync {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Rsync {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Rsync {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Bye {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Bye {
    fn default() -> &'a Bye {
        <Bye as ::protobuf::Message>::default_instance()
    }
}

impl Bye {
    pub fn new() -> Bye {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for Bye {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Bye {
        Bye::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Bye>(
                "Bye",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Bye {
        static instance: ::protobuf::rt::LazyV2<Bye> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Bye::new)
    }
}

impl ::protobuf::Clear for Bye {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Bye {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Bye {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nrndz.proto\"\xc5\x01\n\x07Request\x12\x10\n\x02id\x18\x01\x20\x01(\t\
    R\x02idB\0\x12\x1d\n\x04Ping\x18\x02\x20\x01(\x0b2\x05.PingH\0R\x04PingB\
    \0\x12\x20\n\x05Isync\x18\x03\x20\x01(\x0b2\x06.IsyncH\0R\x05IsyncB\0\
    \x12\x20\n\x05Fsync\x18\x04\x20\x01(\x0b2\x06.FsyncH\0R\x05FsyncB\0\x12\
    \x20\n\x05Rsync\x18\x05\x20\x01(\x0b2\x06.RsyncH\0R\x05RsyncB\0\x12\x1a\
    \n\x03Bye\x18\x06\x20\x01(\x0b2\x04.ByeH\0R\x03ByeB\0B\x05\n\x03cmd:\0\"\
    \x08\n\x04Ping:\0\"\x1b\n\x05Isync\x12\x10\n\x02id\x18\x01\x20\x01(\tR\
    \x02idB\0:\0\"\x91\x01\n\x08Response\x12\x10\n\x02id\x18\x01\x20\x01(\tR\
    \x02idB\0\x12\x1d\n\x04Pong\x18\x02\x20\x01(\x0b2\x05.PongH\0R\x04PongB\
    \0\x12)\n\x08Redirect\x18\x03\x20\x01(\x0b2\t.RedirectH\0R\x08RedirectB\
    \0\x12\x20\n\x05Fsync\x18\x04\x20\x01(\x0b2\x06.FsyncH\0R\x05FsyncB\0B\
    \x05\n\x03cmd:\0\"\x08\n\x04Pong:\0\"4\n\x08Redirect\x12\x10\n\x02id\x18\
    \x01\x20\x01(\tR\x02idB\0\x12\x14\n\x04addr\x18\x02\x20\x01(\tR\x04addrB\
    \0:\0\"1\n\x05Fsync\x12\x10\n\x02id\x18\x01\x20\x01(\tR\x02idB\0\x12\x14\
    \n\x04addr\x18\x02\x20\x01(\tR\x04addrB\0:\0\"\x1b\n\x05Rsync\x12\x10\n\
    \x02id\x18\x01\x20\x01(\tR\x02idB\0:\0\"\x07\n\x03Bye:\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
