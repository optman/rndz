// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc 3.20.0
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `rndz.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:Request)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Request {
    // message fields
    // @@protoc_insertion_point(field:Request.id)
    pub id: ::std::string::String,
    // message oneof groups
    pub cmd: ::std::option::Option<request::Cmd>,
    // special fields
    // @@protoc_insertion_point(special_field:Request.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // .Ping Ping = 2;

    pub fn Ping(&self) -> &Ping {
        match self.cmd {
            ::std::option::Option::Some(request::Cmd::Ping(ref v)) => v,
            _ => <Ping as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_Ping(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Ping(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(request::Cmd::Ping(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Ping(&mut self, v: Ping) {
        self.cmd = ::std::option::Option::Some(request::Cmd::Ping(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Ping(&mut self) -> &mut Ping {
        if let ::std::option::Option::Some(request::Cmd::Ping(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(request::Cmd::Ping(Ping::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(request::Cmd::Ping(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Ping(&mut self) -> Ping {
        if self.has_Ping() {
            match self.cmd.take() {
                ::std::option::Option::Some(request::Cmd::Ping(v)) => v,
                _ => panic!(),
            }
        } else {
            Ping::new()
        }
    }

    // .Isync Isync = 3;

    pub fn Isync(&self) -> &Isync {
        match self.cmd {
            ::std::option::Option::Some(request::Cmd::Isync(ref v)) => v,
            _ => <Isync as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_Isync(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Isync(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(request::Cmd::Isync(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Isync(&mut self, v: Isync) {
        self.cmd = ::std::option::Option::Some(request::Cmd::Isync(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Isync(&mut self) -> &mut Isync {
        if let ::std::option::Option::Some(request::Cmd::Isync(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(request::Cmd::Isync(Isync::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(request::Cmd::Isync(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Isync(&mut self) -> Isync {
        if self.has_Isync() {
            match self.cmd.take() {
                ::std::option::Option::Some(request::Cmd::Isync(v)) => v,
                _ => panic!(),
            }
        } else {
            Isync::new()
        }
    }

    // .Fsync Fsync = 4;

    pub fn Fsync(&self) -> &Fsync {
        match self.cmd {
            ::std::option::Option::Some(request::Cmd::Fsync(ref v)) => v,
            _ => <Fsync as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_Fsync(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Fsync(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(request::Cmd::Fsync(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Fsync(&mut self, v: Fsync) {
        self.cmd = ::std::option::Option::Some(request::Cmd::Fsync(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Fsync(&mut self) -> &mut Fsync {
        if let ::std::option::Option::Some(request::Cmd::Fsync(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(request::Cmd::Fsync(Fsync::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(request::Cmd::Fsync(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Fsync(&mut self) -> Fsync {
        if self.has_Fsync() {
            match self.cmd.take() {
                ::std::option::Option::Some(request::Cmd::Fsync(v)) => v,
                _ => panic!(),
            }
        } else {
            Fsync::new()
        }
    }

    // .Rsync Rsync = 5;

    pub fn Rsync(&self) -> &Rsync {
        match self.cmd {
            ::std::option::Option::Some(request::Cmd::Rsync(ref v)) => v,
            _ => <Rsync as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_Rsync(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Rsync(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(request::Cmd::Rsync(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Rsync(&mut self, v: Rsync) {
        self.cmd = ::std::option::Option::Some(request::Cmd::Rsync(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Rsync(&mut self) -> &mut Rsync {
        if let ::std::option::Option::Some(request::Cmd::Rsync(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(request::Cmd::Rsync(Rsync::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(request::Cmd::Rsync(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Rsync(&mut self) -> Rsync {
        if self.has_Rsync() {
            match self.cmd.take() {
                ::std::option::Option::Some(request::Cmd::Rsync(v)) => v,
                _ => panic!(),
            }
        } else {
            Rsync::new()
        }
    }

    // .Bye Bye = 6;

    pub fn Bye(&self) -> &Bye {
        match self.cmd {
            ::std::option::Option::Some(request::Cmd::Bye(ref v)) => v,
            _ => <Bye as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_Bye(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Bye(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(request::Cmd::Bye(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Bye(&mut self, v: Bye) {
        self.cmd = ::std::option::Option::Some(request::Cmd::Bye(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Bye(&mut self) -> &mut Bye {
        if let ::std::option::Option::Some(request::Cmd::Bye(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(request::Cmd::Bye(Bye::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(request::Cmd::Bye(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Bye(&mut self) -> Bye {
        if self.has_Bye() {
            match self.cmd.take() {
                ::std::option::Option::Some(request::Cmd::Bye(v)) => v,
                _ => panic!(),
            }
        } else {
            Bye::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(6);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Request| { &m.id },
            |m: &mut Request| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Ping>(
            "Ping",
            Request::has_Ping,
            Request::Ping,
            Request::mut_Ping,
            Request::set_Ping,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Isync>(
            "Isync",
            Request::has_Isync,
            Request::Isync,
            Request::mut_Isync,
            Request::set_Isync,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Fsync>(
            "Fsync",
            Request::has_Fsync,
            Request::Fsync,
            Request::mut_Fsync,
            Request::set_Fsync,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Rsync>(
            "Rsync",
            Request::has_Rsync,
            Request::Rsync,
            Request::mut_Rsync,
            Request::set_Rsync,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Bye>(
            "Bye",
            Request::has_Bye,
            Request::Bye,
            Request::mut_Bye,
            Request::set_Bye,
        ));
        oneofs.push(request::Cmd::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Request>(
            "Request",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Request {
    const NAME: &'static str = "Request";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.cmd = ::std::option::Option::Some(request::Cmd::Ping(is.read_message()?));
                },
                26 => {
                    self.cmd = ::std::option::Option::Some(request::Cmd::Isync(is.read_message()?));
                },
                34 => {
                    self.cmd = ::std::option::Option::Some(request::Cmd::Fsync(is.read_message()?));
                },
                42 => {
                    self.cmd = ::std::option::Option::Some(request::Cmd::Rsync(is.read_message()?));
                },
                50 => {
                    self.cmd = ::std::option::Option::Some(request::Cmd::Bye(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if let ::std::option::Option::Some(ref v) = self.cmd {
            match v {
                &request::Cmd::Ping(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &request::Cmd::Isync(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &request::Cmd::Fsync(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &request::Cmd::Rsync(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &request::Cmd::Bye(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.cmd {
            match v {
                &request::Cmd::Ping(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &request::Cmd::Isync(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &request::Cmd::Fsync(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
                &request::Cmd::Rsync(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &request::Cmd::Bye(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Request {
        Request::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Request {
        static instance: Request = Request {
            id: ::std::string::String::new(),
            cmd: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Request {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Request").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Request`
pub mod request {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:Request.cmd)
    pub enum Cmd {
        // @@protoc_insertion_point(oneof_field:Request.Ping)
        Ping(super::Ping),
        // @@protoc_insertion_point(oneof_field:Request.Isync)
        Isync(super::Isync),
        // @@protoc_insertion_point(oneof_field:Request.Fsync)
        Fsync(super::Fsync),
        // @@protoc_insertion_point(oneof_field:Request.Rsync)
        Rsync(super::Rsync),
        // @@protoc_insertion_point(oneof_field:Request.Bye)
        Bye(super::Bye),
    }

    impl ::protobuf::Oneof for Cmd {
    }

    impl ::protobuf::OneofFull for Cmd {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Request as ::protobuf::MessageFull>::descriptor().oneof_by_name("cmd").unwrap()).clone()
        }
    }

    impl Cmd {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Cmd>("cmd")
        }
    }
}

// @@protoc_insertion_point(message:Ping)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Ping {
    // special fields
    // @@protoc_insertion_point(special_field:Ping.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Ping {
    fn default() -> &'a Ping {
        <Ping as ::protobuf::Message>::default_instance()
    }
}

impl Ping {
    pub fn new() -> Ping {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Ping>(
            "Ping",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Ping {
    const NAME: &'static str = "Ping";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Ping {
        Ping::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Ping {
        static instance: Ping = Ping {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Ping {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Ping").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Ping {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Ping {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Isync)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Isync {
    // message fields
    // @@protoc_insertion_point(field:Isync.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:Isync.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Isync {
    fn default() -> &'a Isync {
        <Isync as ::protobuf::Message>::default_instance()
    }
}

impl Isync {
    pub fn new() -> Isync {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Isync| { &m.id },
            |m: &mut Isync| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Isync>(
            "Isync",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Isync {
    const NAME: &'static str = "Isync";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Isync {
        Isync::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Isync {
        static instance: Isync = Isync {
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Isync {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Isync").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Isync {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Isync {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Response)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Response {
    // message fields
    // @@protoc_insertion_point(field:Response.id)
    pub id: ::std::string::String,
    // message oneof groups
    pub cmd: ::std::option::Option<response::Cmd>,
    // special fields
    // @@protoc_insertion_point(special_field:Response.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // .Pong Pong = 2;

    pub fn Pong(&self) -> &Pong {
        match self.cmd {
            ::std::option::Option::Some(response::Cmd::Pong(ref v)) => v,
            _ => <Pong as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_Pong(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Pong(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(response::Cmd::Pong(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Pong(&mut self, v: Pong) {
        self.cmd = ::std::option::Option::Some(response::Cmd::Pong(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Pong(&mut self) -> &mut Pong {
        if let ::std::option::Option::Some(response::Cmd::Pong(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(response::Cmd::Pong(Pong::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(response::Cmd::Pong(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Pong(&mut self) -> Pong {
        if self.has_Pong() {
            match self.cmd.take() {
                ::std::option::Option::Some(response::Cmd::Pong(v)) => v,
                _ => panic!(),
            }
        } else {
            Pong::new()
        }
    }

    // .Redirect Redirect = 3;

    pub fn Redirect(&self) -> &Redirect {
        match self.cmd {
            ::std::option::Option::Some(response::Cmd::Redirect(ref v)) => v,
            _ => <Redirect as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_Redirect(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Redirect(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(response::Cmd::Redirect(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Redirect(&mut self, v: Redirect) {
        self.cmd = ::std::option::Option::Some(response::Cmd::Redirect(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Redirect(&mut self) -> &mut Redirect {
        if let ::std::option::Option::Some(response::Cmd::Redirect(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(response::Cmd::Redirect(Redirect::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(response::Cmd::Redirect(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Redirect(&mut self) -> Redirect {
        if self.has_Redirect() {
            match self.cmd.take() {
                ::std::option::Option::Some(response::Cmd::Redirect(v)) => v,
                _ => panic!(),
            }
        } else {
            Redirect::new()
        }
    }

    // .Fsync Fsync = 4;

    pub fn Fsync(&self) -> &Fsync {
        match self.cmd {
            ::std::option::Option::Some(response::Cmd::Fsync(ref v)) => v,
            _ => <Fsync as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_Fsync(&mut self) {
        self.cmd = ::std::option::Option::None;
    }

    pub fn has_Fsync(&self) -> bool {
        match self.cmd {
            ::std::option::Option::Some(response::Cmd::Fsync(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_Fsync(&mut self, v: Fsync) {
        self.cmd = ::std::option::Option::Some(response::Cmd::Fsync(v))
    }

    // Mutable pointer to the field.
    pub fn mut_Fsync(&mut self) -> &mut Fsync {
        if let ::std::option::Option::Some(response::Cmd::Fsync(_)) = self.cmd {
        } else {
            self.cmd = ::std::option::Option::Some(response::Cmd::Fsync(Fsync::new()));
        }
        match self.cmd {
            ::std::option::Option::Some(response::Cmd::Fsync(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_Fsync(&mut self) -> Fsync {
        if self.has_Fsync() {
            match self.cmd.take() {
                ::std::option::Option::Some(response::Cmd::Fsync(v)) => v,
                _ => panic!(),
            }
        } else {
            Fsync::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Response| { &m.id },
            |m: &mut Response| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Pong>(
            "Pong",
            Response::has_Pong,
            Response::Pong,
            Response::mut_Pong,
            Response::set_Pong,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Redirect>(
            "Redirect",
            Response::has_Redirect,
            Response::Redirect,
            Response::mut_Redirect,
            Response::set_Redirect,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, Fsync>(
            "Fsync",
            Response::has_Fsync,
            Response::Fsync,
            Response::mut_Fsync,
            Response::set_Fsync,
        ));
        oneofs.push(response::Cmd::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Response>(
            "Response",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Response {
    const NAME: &'static str = "Response";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.cmd = ::std::option::Option::Some(response::Cmd::Pong(is.read_message()?));
                },
                26 => {
                    self.cmd = ::std::option::Option::Some(response::Cmd::Redirect(is.read_message()?));
                },
                34 => {
                    self.cmd = ::std::option::Option::Some(response::Cmd::Fsync(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if let ::std::option::Option::Some(ref v) = self.cmd {
            match v {
                &response::Cmd::Pong(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &response::Cmd::Redirect(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &response::Cmd::Fsync(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if let ::std::option::Option::Some(ref v) = self.cmd {
            match v {
                &response::Cmd::Pong(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(2, v, os)?;
                },
                &response::Cmd::Redirect(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(3, v, os)?;
                },
                &response::Cmd::Fsync(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Response {
        Response::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.cmd = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Response {
        static instance: Response = Response {
            id: ::std::string::String::new(),
            cmd: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Response {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Response").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Response`
pub mod response {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:Response.cmd)
    pub enum Cmd {
        // @@protoc_insertion_point(oneof_field:Response.Pong)
        Pong(super::Pong),
        // @@protoc_insertion_point(oneof_field:Response.Redirect)
        Redirect(super::Redirect),
        // @@protoc_insertion_point(oneof_field:Response.Fsync)
        Fsync(super::Fsync),
    }

    impl ::protobuf::Oneof for Cmd {
    }

    impl ::protobuf::OneofFull for Cmd {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Response as ::protobuf::MessageFull>::descriptor().oneof_by_name("cmd").unwrap()).clone()
        }
    }

    impl Cmd {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Cmd>("cmd")
        }
    }
}

// @@protoc_insertion_point(message:Pong)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Pong {
    // special fields
    // @@protoc_insertion_point(special_field:Pong.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Pong {
    fn default() -> &'a Pong {
        <Pong as ::protobuf::Message>::default_instance()
    }
}

impl Pong {
    pub fn new() -> Pong {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Pong>(
            "Pong",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Pong {
    const NAME: &'static str = "Pong";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Pong {
        Pong::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Pong {
        static instance: Pong = Pong {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Pong {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Pong").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Pong {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Pong {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Redirect)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Redirect {
    // message fields
    // @@protoc_insertion_point(field:Redirect.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:Redirect.addr)
    pub addr: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:Redirect.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Redirect {
    fn default() -> &'a Redirect {
        <Redirect as ::protobuf::Message>::default_instance()
    }
}

impl Redirect {
    pub fn new() -> Redirect {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Redirect| { &m.id },
            |m: &mut Redirect| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "addr",
            |m: &Redirect| { &m.addr },
            |m: &mut Redirect| { &mut m.addr },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Redirect>(
            "Redirect",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Redirect {
    const NAME: &'static str = "Redirect";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.addr = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.addr.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.addr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.addr.is_empty() {
            os.write_string(2, &self.addr)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Redirect {
        Redirect::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.addr.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Redirect {
        static instance: Redirect = Redirect {
            id: ::std::string::String::new(),
            addr: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Redirect {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Redirect").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Redirect {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Redirect {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Fsync)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Fsync {
    // message fields
    // @@protoc_insertion_point(field:Fsync.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:Fsync.addr)
    pub addr: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:Fsync.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Fsync {
    fn default() -> &'a Fsync {
        <Fsync as ::protobuf::Message>::default_instance()
    }
}

impl Fsync {
    pub fn new() -> Fsync {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Fsync| { &m.id },
            |m: &mut Fsync| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "addr",
            |m: &Fsync| { &m.addr },
            |m: &mut Fsync| { &mut m.addr },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Fsync>(
            "Fsync",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Fsync {
    const NAME: &'static str = "Fsync";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.addr = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.addr.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.addr);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.addr.is_empty() {
            os.write_string(2, &self.addr)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Fsync {
        Fsync::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.addr.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Fsync {
        static instance: Fsync = Fsync {
            id: ::std::string::String::new(),
            addr: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Fsync {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Fsync").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Fsync {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Fsync {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Rsync)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Rsync {
    // message fields
    // @@protoc_insertion_point(field:Rsync.id)
    pub id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:Rsync.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Rsync {
    fn default() -> &'a Rsync {
        <Rsync as ::protobuf::Message>::default_instance()
    }
}

impl Rsync {
    pub fn new() -> Rsync {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &Rsync| { &m.id },
            |m: &mut Rsync| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Rsync>(
            "Rsync",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Rsync {
    const NAME: &'static str = "Rsync";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Rsync {
        Rsync::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Rsync {
        static instance: Rsync = Rsync {
            id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Rsync {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Rsync").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Rsync {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Rsync {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:Bye)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Bye {
    // special fields
    // @@protoc_insertion_point(special_field:Bye.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Bye {
    fn default() -> &'a Bye {
        <Bye as ::protobuf::Message>::default_instance()
    }
}

impl Bye {
    pub fn new() -> Bye {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Bye>(
            "Bye",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Bye {
    const NAME: &'static str = "Bye";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Bye {
        Bye::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Bye {
        static instance: Bye = Bye {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Bye {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Bye").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Bye {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Bye {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\nrndz.proto\"\xb7\x01\n\x07Request\x12\x0e\n\x02id\x18\x01\x20\x01(\t\
    R\x02id\x12\x1b\n\x04Ping\x18\x02\x20\x01(\x0b2\x05.PingH\0R\x04Ping\x12\
    \x1e\n\x05Isync\x18\x03\x20\x01(\x0b2\x06.IsyncH\0R\x05Isync\x12\x1e\n\
    \x05Fsync\x18\x04\x20\x01(\x0b2\x06.FsyncH\0R\x05Fsync\x12\x1e\n\x05Rsyn\
    c\x18\x05\x20\x01(\x0b2\x06.RsyncH\0R\x05Rsync\x12\x18\n\x03Bye\x18\x06\
    \x20\x01(\x0b2\x04.ByeH\0R\x03ByeB\x05\n\x03cmd\"\x06\n\x04Ping\"\x17\n\
    \x05Isync\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"\x87\x01\n\x08Respo\
    nse\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x1b\n\x04Pong\x18\x02\
    \x20\x01(\x0b2\x05.PongH\0R\x04Pong\x12'\n\x08Redirect\x18\x03\x20\x01(\
    \x0b2\t.RedirectH\0R\x08Redirect\x12\x1e\n\x05Fsync\x18\x04\x20\x01(\x0b\
    2\x06.FsyncH\0R\x05FsyncB\x05\n\x03cmd\"\x06\n\x04Pong\".\n\x08Redirect\
    \x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x12\n\x04addr\x18\x02\x20\
    \x01(\tR\x04addr\"+\n\x05Fsync\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\
    \x12\x12\n\x04addr\x18\x02\x20\x01(\tR\x04addr\"\x17\n\x05Rsync\x12\x0e\
    \n\x02id\x18\x01\x20\x01(\tR\x02id\"\x05\n\x03Byeb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(9);
            messages.push(Request::generated_message_descriptor_data());
            messages.push(Ping::generated_message_descriptor_data());
            messages.push(Isync::generated_message_descriptor_data());
            messages.push(Response::generated_message_descriptor_data());
            messages.push(Pong::generated_message_descriptor_data());
            messages.push(Redirect::generated_message_descriptor_data());
            messages.push(Fsync::generated_message_descriptor_data());
            messages.push(Rsync::generated_message_descriptor_data());
            messages.push(Bye::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
